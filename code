* # Imports here
%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import matplotlib.pyplot as plt

import torch
import numpy as np
from torch import nn
from torch import optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models

________________________________________________

data_dir = 'flowers'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/valid'
test_dir = data_dir + '/test'

________________________________________________

# TODO: Define your transforms for the training, validation, and testing sets
train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406], 
                                                            [0.229, 0.224, 0.225])])

test_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406], 
                                                            [0.229, 0.224, 0.225])])

valid_transforms = test_transforms

# DONE: Load the datasets with ImageFolder
train_datasets = datasets.ImageFolder(train_dir, transform=train_transforms)
test_datasets = datasets.ImageFolder(test_dir, transform=train_transforms)
valid_datasets = datasets.ImageFolder(valid_dir, transform=train_transforms)

# TODO: Using the image datasets and the trainforms, define the dataloaders
trainloader = torch.utils.data.DataLoader(train_datasets, batch_size=64, shuffle=True)
testloader = torch.utils.data.DataLoader(test_datasets, batch_size=32)


________________________________________________

import json

with open('cat_to_name.json', 'r') as f:
    cat_to_name = json.load(f)

________________________________________________

# DONE: Build and train your network
model = models.vgg16(pretrained= True)

from collections import OrderedDict
classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(25088, 500)),
                          ('relu', nn.ReLU()),
                          ('drop', nn.Dropout(0.25)),
                          ('fc2', nn.Linear(500, 102)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

model.classifier= classifier

#imports device computing is on
device = torch.device('cuda:0')

#loss calculation variables
criterion= nn.NLLLoss()
optimizer= optim.Adam(model.classifier.parameters(), lr= 0.001)

model.to(device)

#loop variables, using Transfer Learning Solution
epochs= 2
print_every= 25
steps= 0

print("Start training.")
for e in range(epochs):
    running_loss= 0
    for i, (images, labels) in enumerate(trainloader):
        
        steps+= 1
        
        optimizer.zero_grad()
    
        #moves images and labels tensors to GPU
        images, labels= images.to(device), labels.to(device)
    
        outputs = model.forward(images)
        loss= criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        running_loss+= loss.item()
    
        if steps % print_every == 0:
            print("Epoch: {}/{}... ".format(e+1, epochs),
                  "Loss: {:.4f}".format(running_loss/print_every))
            
            running_loss = 0
            
print("Training complete.")


________________________________________________


# DONE: Do validation on the test set
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        images, labels= images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))

________________________________________________

# DONE: Save the checkpoint 
torch.save(model.state_dict(), 'checkpoint.pth')

________________________________________________

# DONE: Write a function that loads a checkpoint and rebuilds the model
state_dict = torch.load('checkpoint.pth')
print(state_dict.keys())
#Loads state_dict into your model
model.load_state_dict(state_dict)

checkpoint= {'input_size': 672,
            'output_size': 102,
            'hidden_layers': 224,
            'state_dict': model.state_dict()}

torch.save(checkpoint, 'checkpoint.pth')

________________________________________________

def load_checkpoint(filepath):
    checkpoint= torch.load(filepath)
    model = models.vgg16(pretrained= True)

    from collections import OrderedDict
    classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(checkpoint['input_size'], checkpoint['hidden_layers'])),
                          ('relu', nn.ReLU()),
                          ('dropout', nn.Dropout(0.25)),
                          ('fc2', nn.Linear(checkpoint['hidden_layers'], checkpoint['output_size'])),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

    return classifier 

________________________________________________


model= load_checkpoint('checkpoint.pth')
print(model)

________________________________________________

from PIL import Image

def process_image(pil_image):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''

    whratio= (pil_image.size[0]/pil_image.size[1])
    
    if pil_image.size[0]>pil_image.size[1]:
        pil_image= pil_image.resize(((int)(256*whratio),256))
        #print(pil_image)
        
    else:
        pil_image= pil_image.resize((256,(int)(256/whratio)))
        #print(pil_image)
        
    means = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    
    # DONE: Process a PIL image for use in a PyTorch model
    pil_image= pil_image.crop((0,0,224,224))
    #print(pil_image)
    
    #converts color channels from 0-255 to floats 0-1
    #DONE, subtract the mean and divide by the std
    np_image = np.array(pil_image)
    #print(np_image)
    
    normalized_image= (((np_image/255)-means)/std)
    #print(normalized_image)
    
    #pytorch image
    np_image = np_image.transpose((2, 0, 1))
    
    print(np_image.shape)
    
    return np_image

image= Image.open('flowers/test/8/image_03299.jpg')
process_image(image)

________________________________________________

def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    
    model= model.cuda()
    model.eval()
    
    # TODO: Implement the code to predict the class from an image file
    
    pil_img= Image.open(image_path)
    #print(pil_img)
    processed_image= process_image(pil_img)
    print(processed_image.shape)
    torch_image= torch.from_numpy(processed_image)
    torch_image= torch_image.unsqueeze_(0)
    print(torch_image.shape)
    torch_image= torch_image.float().to('cuda')
    output= model.forward(torch_image)
    #top_k= predict.topk(topk)
    #print(top_k)
    
    return torch_img

image_path = 'flowers/test/8/image_03299.jpg'
predict(image_path, model, 5)
